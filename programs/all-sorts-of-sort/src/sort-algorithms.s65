; Copyright 2022-2023 Vulcalien
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.

.autoimport +

.include "main.inc"

; === BUBBLE SORT === ;
.export bubble_sort
.proc bubble_sort
temp = R0

    ldy     #0                  ; Y = outer counter (= i)
outer_loop:
    ; while i != ARRAY_SIZE - 1
    cpy     #(ARRAY_SIZE - 1)
    beq     exit_outer

    ldx     #0                  ; X = inner counter (= j)
inner_loop:
    ; while j != ARRAY_SIZE - 1
    cpx     #(ARRAY_SIZE - 1)
    beq     exit_inner

    lda     ARRAY + 1, x        ; A = ARRAY[j + 1]

    ; if ARRAY[j + 1] < ARRAY[j] then swap
    cmp     ARRAY, x
    bcs     do_not_swap

    ; swap
    sta     temp                ; temp = ARRAY[j + 1]
    lda     ARRAY, x            ; A = ARRAY[j]
    sta     ARRAY + 1, x        ; ARRAY[j + 1] = ARRAY[j]
    lda     temp                ; A = temp
    sta     ARRAY, x            ; ARRAY[j] = temp

    jsr     refresh_save_x_y
do_not_swap:

    inx                         ; inner counter++
    jmp     inner_loop
exit_inner:

    iny                         ; outer counter++
    jmp     outer_loop
exit_outer:

    rts
.endproc

; ============================================================================ ;

; === INSERTION SORT === ;
.export insertion_sort
.proc insertion_sort
value = R0

    ldy     #1                  ; Y = outer counter (= i)
outer_loop:
    ; while i != ARRAY_SIZE
    cpy     #ARRAY_SIZE
    beq     exit_outer

    lda     ARRAY, y            ; A = ARRAY[i]
    sta     value               ; value = ARRAY[i]

    ; inner counter = outer counter (A = Y then X = A)
    tya
    tax                         ; X = inner counter (= j)
    dex                         ; j = i - 1
inner_loop:
    ; while j >= 0 ...
    cpx     #0
    bmi     exit_inner

    ; ... && value < ARRAY[j]
    lda     value               ; A = value
    cmp     ARRAY, x
    bcs     exit_inner

    lda     ARRAY, x            ; A = ARRAY[j]
    sta     ARRAY + 1, x        ; ARRAY[j + 1] = ARRAY[j]

    jsr     refresh_save_x_y

    dex                         ; inner counter--
    jmp     inner_loop
exit_inner:

    lda     value               ; A = value
    sta     ARRAY + 1, x        ; ARRAY[j + 1] = value

    jsr     refresh_save_x_y

    iny                         ; outer counter++
    jmp     outer_loop
exit_outer:

    rts
.endproc

; ============================================================================ ;

; === SELECTION SORT === ;
.export selection_sort
.proc selection_sort
min = R0
min_index = R1

    ldy     #0                  ; Y = outer counter (= i)
outer_loop:
    cpy     #(ARRAY_SIZE - 1)
    beq     exit_outer

    ; set ARRAY[i] as minimum
    lda     ARRAY, y            ; A = ARRAY[i]
    sta     min                 ; min = ARRAY[i]

    sty     min_index           ; min_index = i

    ; inner counter = outer counter (A = Y then X = A)
    tya
    tax                         ; X = inner counter (= j)
inner_loop:
    cpx     #ARRAY_SIZE
    beq     exit_inner

    lda     min                 ; A = min

    ; if ARRAY[j] < min then min = ARRAY[j]
    cmp     ARRAY, x
    bcc     do_not_change_min

    ; change min
    lda     ARRAY, x            ; A = ARRAY[j]
    sta     min                 ; min = ARRAY[j]

    stx     min_index           ; min_index = j
do_not_change_min:

    inx                         ; inner counter++
    jmp     inner_loop
exit_inner:

    ; swap ARRAY[i] and min
    lda     ARRAY, y            ; A = ARRAY[i]
    ldx     min_index           ; X = min_index
    sta     ARRAY, x            ; ARRAY[min_index] = ARRAY[i]
    lda     min                 ; A = min
    sta     ARRAY, y            ; ARRAY[i] = min

    jsr     refresh_save_x_y

    iny                         ; outer counter++
    jmp     outer_loop
exit_outer:

    rts
.endproc
