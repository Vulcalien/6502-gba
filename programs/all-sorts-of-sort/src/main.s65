; Copyright 2022-2023 Vulcalien
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.

.autoimport +

.include "main.inc"

.export start
.proc start
    ; enable BG 0
    lda     #$01
    sta     $1000

    jsr     initialize_screen
    jsr     initialize_font

loop:
    jsr     write_bubble_sort
    jsr     initialize_data
    jsr     bubble_sort
    jsr     wait_key_press

    jsr     write_insertion_sort
    jsr     initialize_data
    jsr     insertion_sort
    jsr     wait_key_press

    jsr     write_selection_sort
    jsr     initialize_data
    jsr     selection_sort
    jsr     wait_key_press

    jmp     loop
.endproc

; Initialize data array in RAM
.proc initialize_data
    lda     #%11100011
    sta     ARRAY + 14

    lda     #%00000000
    sta     ARRAY + 13

    lda     #%00000100
    sta     ARRAY + 12

    lda     #%00000011
    sta     ARRAY + 11

    lda     #%01100000
    sta     ARRAY + 10

    lda     #%10100000
    sta     ARRAY + 9

    lda     #%00000001
    sta     ARRAY + 8

    lda     #%00011100
    sta     ARRAY + 7

    lda     #%00011111
    sta     ARRAY + 6

    lda     #%00100000
    sta     ARRAY + 5

    lda     #%00000010
    sta     ARRAY + 4

    lda     #%11111100
    sta     ARRAY + 3

    lda     #%11100000
    sta     ARRAY + 2

    lda     #%00010100
    sta     ARRAY + 0

    lda     #%00001100
    sta     ARRAY + 1

    jsr     refresh_save_x_y
    jsr     wait_key_press

    rts
.endproc

; Refresh palette
; The values of X and Y registers are preserved
.export refresh_save_x_y
.proc refresh_save_x_y
    ; push X
    txa
    pha

    ; push Y
    tya
    pha

    jsr     wait_5_vblanks

    ldx     #0                  ; X = counter
loop:
    cpx     #ARRAY_SIZE
    beq     exit

    lda     ARRAY, x            ; A = ARRAY[counter]
    sta     $2001, x            ; palette[counter] = ARRAY[counter]

    inx                         ; counter++
    jmp     loop
exit:

    ; pull Y
    pla
    tay

    ; pull X
    pla
    tax

    rts
.endproc

; ============================================================================ ;

bubble_str:
    .asciiz "  BUBBLE SORT  "

.proc write_bubble_sort
    lda     #<bubble_str        ; lo byte
    sta     R0
    lda     #>bubble_str        ; hi byte
    sta     R0 + 1

    lda     #<$4228             ; lo byte
    sta     R2
    lda     #>$4228             ; hi byte
    sta     R2 + 1

    jsr     font_write

    rts
.endproc

insertion_str:
    .asciiz "INSERTION SORT"

.proc write_insertion_sort
    lda     #<insertion_str     ; lo byte
    sta     R0
    lda     #>insertion_str     ; hi byte
    sta     R0 + 1

    lda     #<$4228             ; lo byte
    sta     R2
    lda     #>$4228             ; hi byte
    sta     R2 + 1

    jsr     font_write

    rts
.endproc

selection_str:
    .asciiz "SELECTION SORT"

.proc write_selection_sort
    lda     #<selection_str     ; lo byte
    sta     R0
    lda     #>selection_str     ; hi byte
    sta     R0 + 1

    lda     #<$4228             ; lo byte
    sta     R2
    lda     #>$4228             ; hi byte
    sta     R2 + 1

    jsr     font_write

    rts
.endproc
